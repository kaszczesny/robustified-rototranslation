/**
 * @file RobustifiedRototranslation.h RobustifiedRototranslation class definition.
 * This header must be included by application using the library.
 *
 * @author Krzysztof Szczęsny, Jan Twardowski
 * @date Created on: 14 March 2017
 * @version 1.0
 * @copyright Copyright (c) 2017 Krzysztof Szczęsny, Jan Twardowski
 * @note This algorithm is based on "Realtime edge-based visual odometry for
 * a monocular camera" by Juan José Tarrio & Sol Pedre
 * @pre OpenCV 3.1
 * @pre C++11
 * @todo change license?
 * @par License
 *
 * MIT License
 *
 * Copyright (c) 2017 Krzysztof Szczęsny, Jan Twardowski
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

#ifndef ROBUSTIFIED_ROTOTRANSLATION_H_
#define ROBUSTIFIED_ROTOTRANSLATION_H_

#include "common.h"
class Scheduler;

/**
 * @brief Public API
 * @todo Initialization procedure
 * @todo Feedback variants
 */
class RobustifiedRototranslation {
	public:
		/**
		 * @brief The only public constructor.
		 * @param[in] img_width width of rescaled photos
		 * @param[in] img_height height of rescaled photos
		 * @param[in] calibration_config path to the calibration file generated by CalibrationHelper
		 * @param[in] edge_algorithm_config edge detection algorithm choice & its arguments
		 * @param[in] config optional parameters
		 */
		RobustifiedRototranslation(uint32_t img_width, uint32_t img_height, const char *calibration_config, EdgeAlgorithms::edge_algorithm_config_t edge_algorithm_config, const config_t *config=nullptr);
		
		/// Stops threads and deletes the Scheduler.
		~RobustifiedRototranslation();
		
		/**
		 * @brief Accept new frame (image & GPS) into the buffer.
		 * @note Non-blocking.
		 * @param[in] img grayscale, downscaled image of size as in the constructor.
 		 * @todo what should we do with image - copy it into buffer? take ownership?
		 * @param[in] gps current gps reading
		 * @return whether frame was accepted or rejected due to filled buffer
		 * @todo more args?
		 * @todo implementation: save current timestamp & sequence number
		 */
		bool NewFrame(uint8_t *img, const gps_t &gps);
		
		//GetFeedback()
		
		/// Halts library threads operation (probably not resumeable afterwards)
		/// @todo useful for getting some final statistics before destroying the object, I guess?
		void Stop(void);

	#ifndef TEST
	private:
	#endif
		RobustifiedRototranslation(void); ///< Dummy constructor for UT
		
		Scheduler *scheduler_; ///< Scheduler object: thread & buffers management
};

#endif
